<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--这里只是单纯的整合Spring而已，没有配置Spring的参数！配置整合Mybatis过程-->
    <!--1.配置数据库相关参数-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!--2.配置数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--连接数据库的基本属性-->
        <property name="driverClass" value="${driver}"></property>
        <property name="jdbcUrl" value="${url}"></property>
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>

        <!--配置私有属性-->
        <!--初始连接数-->
<!--        <property name="initialPoolSize" value="30"></property>-->
        <!--最大最小连接数-->
        <property name="maxPoolSize" value="30"></property>
        <property name="minPoolSize" value="10"></property>
        <!--最大等待时间-->
        <property name="checkoutTimeout" value="10000"></property>
        <!--自动提交关闭-->
        <property name="autoCommitOnClose" value="false"></property>
        <!--重试次数-->
        <property name="acquireRetryAttempts" value="2"></property>
    </bean>


    <!--3. 整合Mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据库连接池-->
        <property name="dataSource" ref="dataSource"></property>
        <!--mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--mapper地址-->
        <property name="mapperLocations" value="classpath:Mapper/*.xml"></property>
        <!--使用别名-->
        <property name="typeAliasesPackage" value="classpath:org.seckill.entity"></property>
    </bean>

    <!--4.配置扫描DAO接口，动态实现Dao接口，自动实现注入spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!--配置扫描Dao接口-->
        <property name="basePackage" value="org.seckill.dao"></property>
    </bean>

    <!--配置redis，将redis对象注入，使用构造器方法注入-->
   <!-- <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        &lt;!&ndash;在这里将参数ip和port写死，这样的话Spring会自动注入，可以实现对象的直接获取&ndash;&gt;
        <constructor-arg index="0" value="192.168.87.101"></constructor-arg>
        <constructor-arg index="1" value="6379"></constructor-arg>
    </bean>-->

    <!-- RedisDAO -->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="192.168.87.101"  type="java.lang.String"/>
        <constructor-arg index="1" value="6379" type="int"/>
        <constructor-arg index="2" value="5000" type="int"/>
        <!--<constructor-arg index="3" value="raspppoe" type="java.lang.String"/>-->
    </bean>

    <!-- 自动扫描带RedisComponent注解的包 -->
    <context:component-scan
            base-package="org.seckill.dao.cache">
        <context:include-filter type="annotation"
                                expression="org.seckill.infrastructure.RedisComponent" />
    </context:component-scan>
</beans>